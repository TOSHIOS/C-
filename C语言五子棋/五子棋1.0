#include "stdio.h"
#include "math.h"

#define M 25
#define N 17       //定义棋盘大小+8  1黑2白

int chess[M][M]={{0}};//设置棋盘大小
int now;//设置下棋标志
int player=1,ai=2,error=-1;
int p[20][5];
long sum[M][M]={{0}};

void Print();//输出棋盘图像
int Basic_condition(int x,int y);//判断下子位置是否出界
void Find_point(int *pp,int *qq);//找到最佳性最优的下子位置
int JUDGE(int x,int y);//判断胜负
void Grade();//计算所有位置的得分
int Base(int i,int j);//坐标为(i,j)的所有五连珠情况
long Assessment(int num1,int num2);//评分标准

//主程序
int main()
{
    int p=0,q=0;
    int x,y;
    int i,j;
    int num;
    do{
        Print();
        now=1;
		do{
            scanf("%d %d",&x,&y);
            x+=4;y+=4;
            if(chess[x][y])printf("此位置已下子\n");
        }while(chess[x][y]);//接收下子位置
        chess[x][y]=1;
        if(++num==N*N)
        {
            printf("平局！\n");
            break;
        }
		if(JUDGE(x,y)==1)
		{
		    Print();
		    printf("黑棋赢！\n");
            break;
		}

        Grade();
        Find_point(&p,&q);
        now=2;
        chess[p][q]=2;printf("电脑下子坐标为(%d,%d)\n",p-4,q-4);
        if(++num==N*N)
        {
            Print();
            printf("平局！\n");
            break;
        }
        if(JUDGE(p,q)==2)
        {
            Print();
            printf("白棋赢！\n");
            break;
        }
        num+=2;
    }while(1);
    return 0;
}

void Print()//输出棋盘图像
{
    int i,j;int m=0,n=0;
    printf("  ");for(n=0;n<N;n++)printf("%2d",n);printf("\n");n=0;//
    for(i=4;i<M-4;i++)
    {
        printf("%2d",n++);//
        for(j=4;j<M-4;j++)
        {
            printf(" ");
            if(chess[i][j]==0) printf("*");
            if(chess[i][j]==1) printf("1");
            if(chess[i][j]==2) printf("2");
        }
        printf("\n");
    }
}

int Basic_condition(int x,int y)//判断下子位置是否出界
{
    if(x>=4&&x<M-4&&y>=4&&y<M-4)
        return 1;
    else
        return 0;
}

void Find_point(int *pp,int *qq)//找到最佳性最优的下子位置
{
    int i,j,flag=0;//flag为结束标志
    long t=0;
    for(i=4;i<M-4;i++)
    {
        for(j=4;j<M-4;j++)
            if(!chess[i][j])
            {
                t=sum[i][j];
                *pp=i;
                *qq=j;
                flag=1;
                break;
            }
        if(flag==1)
            break;
    }//寻找第一个未下子位置对应的sum值
    for(i=4;i<M-4;i++)
        for(j=4;j<M-4;j++)
            if(!chess[i][j]&&sum[i][j]>t)
            {
                *pp=i;
                *qq=j;
                t=sum[i][j];
            }
    //等于怎么办
}

int JUDGE(int x,int y)//判断胜负，返回1赢，返回0无
{
    int a=1,b=1,c=1,d=1,i;//累计横竖正斜反邪四个方向的连续相同棋子数目

    for(i=1;i<5;i++)if(y+i<M-4&&chess[x][y+i]==now)a++;else break;//向下检查
    for(i=1;i<5;i++)if(y-i>=4&&chess[x][y-i]==now)a++;else break;//向上检查
    if(a>=5)return now;//若果达到5个则判断当前走子玩家为赢家

    for(i=1;i<5;i++)if(x+i<M-4&&chess[x+i][y]==now)b++;else break;//向右检查
    for(i=1;i<5;i++)if(x-i>=4&&chess[x-i][y]==now)b++;else break;//向左检查
    if(b>=5)return now;//若果达到5个则判断当前走子玩家为赢家

    for(i=1;i<5;i++)if(x+i<M-4&&y+i<M-4&&chess[x+i][y+i]==now)c++;else break;//向右下检查
    for(i=1;i<5;i++)if(x-i>=4&&y-i>=4&&chess[x-i][y-i]==now)c++;else break;//向左上检查
    if(c>=5)return now;//若果达到5个则判断当前走子玩家为赢家

    for(i=1;i<5;i++)if(x+i<M-4&&y-i>=4&&chess[x+i][y-i]==now)d++;else break;//向右上检查
    for(i=1;i<5;i++)if(x-i>=4&&y+i<M-4&&chess[x-i][y+i]==now)d++;else break;//向左下检查
    if(d>=5)return now;//若果达到5个则判断当前走子玩家为赢家

    return 0;//若没有检查到五连珠，则返回0表示还没有玩家达成胜利
}

void Grade()//计算所有位置的得分
{
    int i,j,m,n;
    int num1,num2;
    for(i=4;i<M-4;i++)
    {
        for(j=4;j<M-4;j++)
        {
            sum[i][j]=0;
            if(!chess[i][j])
            {
                Base(i,j);
                for(m=0;m<20;m++)
                {
                    num1=0,num2=0;
                    for(n=0;n<5;n++)
                    {
                        if(p[m][n]==ai)num1++;
                        if(p[m][n]==player)num2++;
                    }
                    sum[i][j]+=Assessment(num1,num2);
                }
            }
//            printf("%8ld,",sum[i][j]);
        }
//        printf("\n");
    }
}

int Base(int i,int j)//坐标为(i,j)的所有五连珠情况
{
    //左上->右下
    p[0][0]=chess[i-4][j-4];p[0][1]=chess[i-3][j-3];p[0][2]=chess[i-2][j-2];p[0][3]=chess[i-1][j-1];p[0][4]=chess[i][j];
    p[1][0]=chess[i-3][j-3];p[1][1]=chess[i-2][j-2];p[1][2]=chess[i-1][j-1];p[1][3]=chess[i][j];p[1][4]=chess[i+1][j+1];
    p[2][0]=chess[i-2][j-2];p[2][1]=chess[i-1][j-1];p[2][2]=chess[i][j];p[2][3]=chess[i+1][j+1];p[2][4]=chess[i+2][j+2];
    p[3][0]=chess[i-1][j-1];p[3][1]=chess[i][j];p[3][2]=chess[i+1][j+1];p[3][3]=chess[i+2][j+2];p[3][4]=chess[i+3][j+3];
    p[4][0]=chess[i][j];p[4][1]=chess[i+1][j+1];p[4][2]=chess[i+2][j+2];p[4][3]=chess[i+3][j+3];p[4][4]=chess[i+4][j+4];
    //上->下
    p[5][0]=chess[i-4][j];p[5][1]=chess[i-3][j];p[5][2]=chess[i-2][j];p[5][3]=chess[i-1][j];p[5][4]=chess[i][j];
    p[6][0]=chess[i-3][j];p[6][1]=chess[i-2][j];p[6][2]=chess[i-1][j];p[6][3]=chess[i][j];p[6][4]=chess[i+1][j];
    p[7][0]=chess[i-2][j];p[7][1]=chess[i-1][j];p[7][2]=chess[i][j];p[7][3]=chess[i+1][j];p[7][4]=chess[i+2][j];
    p[8][0]=chess[i-1][j];p[8][1]=chess[i][j];p[8][2]=chess[i+1][j];p[8][3]=chess[i+2][j];p[8][4]=chess[i+3][j];
    p[9][0]=chess[i][j];p[9][1]=chess[i+1][j];p[9][2]=chess[i+2][j];p[9][3]=chess[i+3][j];p[9][4]=chess[i+4][j];
    //右上->左下
    p[10][0]=chess[i-4][j+4];p[10][1]=chess[i-3][j+3];p[10][2]=chess[i-2][j+2];p[10][3]=chess[i-1][j+1];p[10][4]=chess[i][j];
    p[11][0]=chess[i-3][j+3];p[11][1]=chess[i-2][j+2];p[11][2]=chess[i-1][j+1];p[11][3]=chess[i][j];p[11][4]=chess[i+1][j-1];
    p[12][0]=chess[i-2][j+2];p[12][1]=chess[i-1][j+1];p[12][2]=chess[i][j];p[12][3]=chess[i+1][j-1];p[112][4]=chess[i+2][j-2];
    p[13][0]=chess[i-1][j+1];p[13][1]=chess[i][j];p[13][2]=chess[i+1][j-1];p[13][3]=chess[i+2][j-2];p[13][4]=chess[i+3][j-3];
    p[14][0]=chess[i][j];p[14][1]=chess[i+1][j-1];p[14][2]=chess[i+2][j-2];p[14][3]=chess[i+3][j-3];p[14][4]=chess[i+4][j-4];
    //左->右
    p[15][0]=chess[i][j-4];p[15][1]=chess[i][j-3];p[15][2]=chess[i][j-2];p[15][3]=chess[i][j-1];p[15][4]=chess[i][j];
    p[16][0]=chess[i][j-3];p[16][1]=chess[i][j-2];p[16][2]=chess[i][j-1];p[16][3]=chess[i][j];p[16][4]=chess[i][j+1];
    p[17][0]=chess[i][j-2];p[17][1]=chess[i][j-1];p[17][2]=chess[i][j];p[17][3]=chess[i][j+1];p[17][4]=chess[i][j+2];
    p[18][0]=chess[i][j-1];p[18][1]=chess[i][j];p[18][2]=chess[i][j+1];p[18][3]=chess[i][j+2];p[18][4]=chess[i][j+3];
    p[19][0]=chess[i][j];p[19][1]=chess[i][j+1];p[19][2]=chess[i][j+2];p[19][3]=chess[i][j+3];p[19][4]=chess[i][j+4];
}

long Assessment(int num1,int num2)//评分标准
{
    if(num2==0)
        switch(num1)
        {
            case 0:return 7;
            case 1:return 35;
            case 2:return 800;
            case 3:return 15000;
            case 4:return 800000;
        }
    if(num2!=0&&num1==0)
        switch(num2)
        {
            case 1:return 15;
            case 2:return 400;
            case 3:return 1800;
            case 4:return 100000;
        }
    return 0;
}
